/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

/// <reference types="unplugin-vue-router/client" />

import type {
  // type safe route locations
  RouteLocationTypedList,
  RouteLocationResolvedTypedList,
  RouteLocationNormalizedTypedList,
  RouteLocationNormalizedLoadedTypedList,
  RouteLocationAsString,
  RouteLocationAsRelativeTypedList,
  RouteLocationAsPathTypedList,

  // helper types
  // route definitions
  RouteRecordInfo,
  ParamValue,
  ParamValueOneOrMore,
  ParamValueZeroOrMore,
  ParamValueZeroOrOne,

  // vue-router extensions
  _RouterTyped,
  RouterLinkTyped,
  RouterLinkPropsTyped,
  NavigationGuard,
  UseLinkFnTyped,

  // data fetching
  _DataLoader,
  _DefineLoaderOptions,
} from 'unplugin-vue-router/types'

declare module 'vue-router/auto/routes' {
  export interface RouteNamedMap {
    'root': RouteRecordInfo<'root', '/', Record<never, never>, Record<never, never>>,
    '$error': RouteRecordInfo<'$error', '/:error(.*)', { error: ParamValue<true> }, { error: ParamValue<false> }>,
    'id': RouteRecordInfo<'id', '/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'add-edit-permission': RouteRecordInfo<'add-edit-permission', '/AddEditPermission', Record<never, never>, Record<never, never>>,
    'add-edit-role': RouteRecordInfo<'add-edit-role', '/AddEditRole', Record<never, never>, Record<never, never>>,
    'add-new-user-drawer': RouteRecordInfo<'add-new-user-drawer', '/AddNewUserDrawer', Record<never, never>, Record<never, never>>,
    'add-role': RouteRecordInfo<'add-role', '/AddRole', Record<never, never>, Record<never, never>>,
    'apex-chart': RouteRecordInfo<'apex-chart', '/apex-chart', Record<never, never>, Record<never, never>>,
    'category-list-report': RouteRecordInfo<'category-list-report', '/category-list-report', Record<never, never>, Record<never, never>>,
    'chartjs': RouteRecordInfo<'chartjs', '/chartjs', Record<never, never>, Record<never, never>>,
    'daily-report': RouteRecordInfo<'daily-report', '/daily-report', Record<never, never>, Record<never, never>>,
    'daily-report-list': RouteRecordInfo<'daily-report-list', '/daily-report-list', Record<never, never>, Record<never, never>>,
    'dashboard': RouteRecordInfo<'dashboard', '/dashboard', Record<never, never>, Record<never, never>>,
    'decentralized-group': RouteRecordInfo<'decentralized-group', '/decentralized-group', Record<never, never>, Record<never, never>>,
    'edit-role': RouteRecordInfo<'edit-role', '/EditRole', Record<never, never>, Record<never, never>>,
    'edit-user-drawer': RouteRecordInfo<'edit-user-drawer', '/EditUserDrawer', Record<never, never>, Record<never, never>>,
    'forgot-password': RouteRecordInfo<'forgot-password', '/forgot-password', Record<never, never>, Record<never, never>>,
    'goal-setting': RouteRecordInfo<'goal-setting', '/goal-setting', Record<never, never>, Record<never, never>>,
    'list-permission': RouteRecordInfo<'list-permission', '/list-permission', Record<never, never>, Record<never, never>>,
    'list-point-list': RouteRecordInfo<'list-point-list', '/list-point-list', Record<never, never>, Record<never, never>>,
    'list-point-list-copy': RouteRecordInfo<'list-point-list-copy', '/list-point-list-copy', Record<never, never>, Record<never, never>>,
    'list-role': RouteRecordInfo<'list-role', '/list-role', Record<never, never>, Record<never, never>>,
    'list-role-user': RouteRecordInfo<'list-role-user', '/list-role-user', Record<never, never>, Record<never, never>>,
    'list-user': RouteRecordInfo<'list-user', '/list-user', Record<never, never>, Record<never, never>>,
    'login': RouteRecordInfo<'login', '/login', Record<never, never>, Record<never, never>>,
    'permissions-user': RouteRecordInfo<'permissions-user', '/permissions-user', Record<never, never>, Record<never, never>>,
    'profile': RouteRecordInfo<'profile', '/profile', Record<never, never>, Record<never, never>>,
    'profile-about': RouteRecordInfo<'profile-about', '/profile/About', Record<never, never>, Record<never, never>>,
    'profile-activity-timeline': RouteRecordInfo<'profile-activity-timeline', '/profile/ActivityTimeline', Record<never, never>, Record<never, never>>,
    'profile-connection': RouteRecordInfo<'profile-connection', '/profile/Connection', Record<never, never>, Record<never, never>>,
    'profile-project-list': RouteRecordInfo<'profile-project-list', '/profile/ProjectList', Record<never, never>, Record<never, never>>,
    'profile-teams': RouteRecordInfo<'profile-teams', '/profile/Teams', Record<never, never>, Record<never, never>>,
    'role': RouteRecordInfo<'role', '/role', Record<never, never>, Record<never, never>>,
    'role copy': RouteRecordInfo<'role copy', '/role copy', Record<never, never>, Record<never, never>>,
    'role-cards': RouteRecordInfo<'role-cards', '/RoleCards', Record<never, never>, Record<never, never>>,
    'second-page': RouteRecordInfo<'second-page', '/second-page', Record<never, never>, Record<never, never>>,
    'set-daily-activity-goals': RouteRecordInfo<'set-daily-activity-goals', '/set-daily-activity-goals', Record<never, never>, Record<never, never>>,
    'set-daily-business-goals': RouteRecordInfo<'set-daily-business-goals', '/set-daily-business-goals', Record<never, never>, Record<never, never>>,
    'target-list-act': RouteRecordInfo<'target-list-act', '/target-list-act', Record<never, never>, Record<never, never>>,
    'target-list-business': RouteRecordInfo<'target-list-business', '/target-list-business', Record<never, never>, Record<never, never>>,
    'user-profile': RouteRecordInfo<'user-profile', '/user-profile', Record<never, never>, Record<never, never>>,
  }
}

declare module 'vue-router/auto' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export type RouterTyped = _RouterTyped<RouteNamedMap>

  /**
   * Type safe version of `RouteLocationNormalized` (the type of `to` and `from` in navigation guards).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalized<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationNormalizedLoaded` (the return type of `useRoute()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalizedLoaded<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationResolved` (the returned route of `router.resolve()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationResolved<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationResolvedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocation` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocation<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationRaw` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationRaw<Name extends keyof RouteNamedMap = keyof RouteNamedMap> =
    | RouteLocationAsString<RouteNamedMap>
    | RouteLocationAsRelativeTypedList<RouteNamedMap>[Name]
    | RouteLocationAsPathTypedList<RouteNamedMap>[Name]

  /**
   * Generate a type safe params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParams<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['params']
  /**
   * Generate a type safe raw params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParamsRaw<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['paramsRaw']

  export function useRouter(): RouterTyped
  export function useRoute<Name extends keyof RouteNamedMap = keyof RouteNamedMap>(name?: Name): RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  export const useLink: UseLinkFnTyped<RouteNamedMap>

  export function onBeforeRouteLeave(guard: NavigationGuard<RouteNamedMap>): void
  export function onBeforeRouteUpdate(guard: NavigationGuard<RouteNamedMap>): void

  export const RouterLink: RouterLinkTyped<RouteNamedMap>
  export const RouterLinkProps: RouterLinkPropsTyped<RouteNamedMap>

  // Experimental Data Fetching

  export function defineLoader<
    P extends Promise<any>,
    Name extends keyof RouteNamedMap = keyof RouteNamedMap,
    isLazy extends boolean = false,
  >(
    name: Name,
    loader: (route: RouteLocationNormalizedLoaded<Name>) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>
  export function defineLoader<
    P extends Promise<any>,
    isLazy extends boolean = false,
  >(
    loader: (route: RouteLocationNormalizedLoaded) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>

  export {
    _definePage as definePage,
    _HasDataLoaderMeta as HasDataLoaderMeta,
    _setupDataFetchingGuard as setupDataFetchingGuard,
    _stopDataFetchingScope as stopDataFetchingScope,
  } from 'unplugin-vue-router/runtime'
}

declare module 'vue-router' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export interface TypesConfig {
    beforeRouteUpdate: NavigationGuard<RouteNamedMap>
    beforeRouteLeave: NavigationGuard<RouteNamedMap>

    $route: RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[keyof RouteNamedMap]
    $router: _RouterTyped<RouteNamedMap>

    RouterLink: RouterLinkTyped<RouteNamedMap>
  }
}
